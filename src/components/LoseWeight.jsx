import React, { useState, useEffect } from "react";
import "./LoseWeight.css";
import PageHeader from "./PageHeader";
export default function LoseWeight() {
  const [formData, setFormData] = useState({
    goal: "",
    diet: "",
    days: "",
    currentWeight: "",
    targetWeight: "",
    allergies: "",
    favorites: "",
    favoriteMealTime: "",
    language: "kk", // default: “õ–∞–∑–∞“õ—à–∞
  });
  const [mealTable, setMealTable] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const saved = localStorage.getItem("mealTable");
    if (saved) setMealTable(saved);
  }, []);

  const handleChange = (e) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const {
      goal,
      diet,
      days,
      currentWeight,
      targetWeight,
      allergies,
      favorites,
      favoriteMealTime,
      language,
    } = formData;

    if (!diet || !days || !currentWeight || !targetWeight) {
      alert("Please fill in all required fields!");
      return;
    }

    setLoading(true);

    let prompt = "";

    if (language === "kk") {
      prompt = `
–ú–∞“ì–∞–Ω –∫–µ–ª–µ—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ ${days} –∫“Ø–Ω–¥—ñ–∫ —Ç–∞“ì–∞–º –∫–µ—Å—Ç–µ—Å—ñ–Ω –∂–∞—Å–∞–ø –±–µ—Ä:

- –ú–∞“õ—Å–∞—Ç: –∞—Ä—ã“õ—Ç–∞—É
- –î–∏–µ—Ç–∞ —Ç“Ø—Ä—ñ: ${diet}
- “ö–∞–∑—ñ—Ä–≥—ñ —Å–∞–ª–º–∞“õ: ${currentWeight} –∫–≥
- “ö–∞–ª–∞“ì–∞–Ω —Å–∞–ª–º–∞“õ: ${targetWeight} –∫–≥
- –¢–∞“ì–∞–º–¥—ã“õ –∞–ª–ª–µ—Ä–≥–∏—è: ${allergies || "–∂–æ“õ"}
- “∞–Ω–∞—Ç–∞—Ç—ã–Ω —Ç–∞“ì–∞–º–¥–∞—Ä: ${favorites || "–∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω"}
- –¢–∞“£–¥–∞—É–ª—ã –∞—Å –º–µ–∑–≥—ñ–ª—ñ: ${favoriteMealTime || "–±–∞—Ä–ª—ã“õ"}

–¢–µ–∫ <table> “õ–æ–ª–¥–∞–Ω—ã–ø —Ç–∞“ì–∞–º –∫–µ—Å—Ç–µ—Å—ñ–Ω “õ“±—Ä. –ö–µ—Å—Ç–µ–Ω—ñ“£ –∞—Å—Ç—ã–Ω–∞ —Ç–µ–∫ 1-2 —Å”©–π–ª–µ–º–¥—ñ–∫ “õ—ã—Å“õ–∞ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –Ω–µ –µ—Å–∫–µ—Ä—Ç—É –∂–∞–∑. –ë–∞—Å“õ–∞ –µ—à—Ç–µ“£–µ –∂–∞–∑–±–∞.
`;
    } else if (language === "ru") {
      prompt = `
–°–æ—Å—Ç–∞–≤—å –º–Ω–µ —Ç–∞–±–ª–∏—Ü—É –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ ${days} –¥–Ω–µ–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:

- –¶–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ
- –î–∏–µ—Ç–∞: ${diet}
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${currentWeight} –∫–≥
- –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: ${targetWeight} –∫–≥
- –ê–ª–ª–µ—Ä–≥–∏–∏: ${allergies || "–Ω–µ—Ç"}
- –õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${favorites || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
- –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏: ${favoriteMealTime || "–≤—Å–µ"}

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é <table>. –ü–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π –¥–æ–±–∞–≤—å 1-2 —Å—Ç—Ä–æ–∫–∏ —Å –∫—Ä–∞—Ç–∫–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º. –ù–∏–∫–∞–∫–æ–≥–æ –∫–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª—è–π.
`;
    } else {
      prompt = `
Create a ${days}-day meal plan based on the following:

- Goal: weight loss
- Diet type: ${diet}
- Current weight: ${currentWeight} kg
- Target weight: ${targetWeight} kg
- Food allergies: ${allergies || "none"}
- Favorite foods: ${favorites || "not specified"}
- Preferred meal time: ${favoriteMealTime || "all"}

Only generate a <table> with the meal plan. Below the table, write a very short (1-2 sentences) explanation or warning. Do not include any extra code or description.
`;
    }

    const res = await fetch(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAo_H2fkN00fjm-sQkU2t2EdNDeSlx9Zeg",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
      }
    );

    const data = await res.json();
    const rawText =
      data?.candidates?.[0]?.content?.parts?.[0]?.text || "–ö–µ—Å—Ç–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.";
    setMealTable(rawText);
    setLoading(false);
  };

  const saveToLocal = () => {
    localStorage.setItem("mealTable", mealTable);
    alert("–ö–µ—Å—Ç–µ —Å–∞“õ—Ç–∞–ª–¥—ã!");
  };

  return (
    <div>
      <div>
        <PageHeader/>
      </div>
      <div className="app-container">
        <h1 className="app-title">üåê FitMeal ‚Äî –ú–Ω–æ–≥–æ—è–∑—á–Ω—ã–π —Ç–∞–±–ª–∏—Ü–∞ –µ–¥—ã</h1>

        <form onSubmit={handleSubmit} className="meal-form">
          <label>üåç –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</label>
          <select
            name="language"
            onChange={handleChange}
            className="meal-select"
          >
            <option value="kk">“ö–∞–∑–∞“õ—à–∞</option>
            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
            <option value="en">English</option>
          </select>

          <div className="center-form">
            <div className="choose-container">
              <label className="meal-label erekshe">–¢–∏–ø –¥–∏–µ—Ç—ã:</label>
              {[
                "‚òòÔ∏è–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π",
                "ü•©–º—è—Å–æ–µ–¥–ª–µ–Ω–Ω—ã–π",
                "ü•ë–∫–µ—Ç–æ",
                "ü•í–≤–µ–≥–∞–Ω",
                "ü•¨–ø–∞–ª–µ–æ",
                "üïë–ø—Ä–æ–≥–æ–ª–æ–¥–∞–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º",
              ].map((diet) => (
                <label className="diet-item" key={diet}>
                  <input
                    type="radio"
                    name="diet"
                    value={diet}
                    onChange={handleChange}
                  />
                  {diet}
                </label>
              ))}
            </div>

            <div className="big-form-cont">
              <label className="meal-label">–¢–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):</label>
              <input
                type="number"
                name="currentWeight"
                onChange={handleChange}
                className="meal-input"
              />

              <label className="meal-label">–¶–µ–ª—å (–∫–≥):</label>
              <input
                className="meal-input"
                type="number"
                name="targetWeight"
                onChange={handleChange}
              />

              <label className="meal-label">–ö“Ø–Ω —Å–∞–Ω—ã:</label>
              <input
                className="meal-input"
                type="number"
                name="days"
                onChange={handleChange}
              />

              <label className="meal-label">–ê–ª–ª–µ—Ä–≥–∏—è“£—ã–∑:</label>
              <input
                className="meal-input"
                type="text"
                name="allergies"
                onChange={handleChange}
              />

              <label className="meal-label">“∞–Ω–∞—Ç–∞—Ç—ã–Ω —Ç–∞“ì–∞–º–¥–∞—Ä:</label>
              <input
                className="meal-input"
                type="text"
                name="favorites"
                onChange={handleChange}
              />
            </div>
          </div>

          <label className="meal-label bottom-label">
            –¢–∞“£–¥–∞—É–ª—ã –∞—Å –º–µ–∑–≥—ñ–ª—ñ:
          </label>
          <select
            className="meal-select"
            name="favoriteMealTime"
            onChange={handleChange}
          >
            <option value="">–ë–∞—Ä–ª—ã“ì—ã</option>
            <option value="—Ç–∞“£“ì—ã –∞—Å">–¢–∞“£“ì—ã –∞—Å</option>
            <option value="—Ç“Ø—Å–∫—ñ –∞—Å">–¢“Ø—Å–∫—ñ –∞—Å</option>
            <option value="–∫–µ—à–∫—ñ –∞—Å">–ö–µ—à–∫—ñ –∞—Å</option>
          </select>

          <button class="btn">
            <svg
              height="24"
              width="24"
              fill="#FFFFFF"
              viewBox="0 0 24 24"
              data-name="Layer 1"
              id="Layer_1"
              class="sparkle"
            >
              <path d="M10,21.236,6.755,14.745.264,11.5,6.755,8.255,10,1.764l3.245,6.491L19.736,11.5l-6.491,3.245ZM18,21l1.5,3L21,21l3-1.5L21,18l-1.5-3L18,18l-3,1.5ZM19.333,4.667,20.5,7l1.167-2.333L24,3.5,21.667,2.333,20.5,0,19.333,2.333,17,3.5Z"></path>
            </svg>

            <span class="text">Generate</span>
          </button>
        </form>

        {loading && <p>–ö–µ—Å—Ç–µ –∂–∞—Å–∞–ª—ã–ø –∂–∞—Ç—ã—Ä...</p>}

        {mealTable && (
          <div>
            <div
              className="meal-table"
              dangerouslySetInnerHTML={{ __html: mealTable }}
            />

            <button onClick={saveToLocal}>üíæ Save</button>
          </div>
        )}
      </div>
    </div>
  );
}
