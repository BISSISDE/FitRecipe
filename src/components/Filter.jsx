import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import "./Filter.css";
import PageHeader from "./PageHeader.jsx";
import "./LoseWeight.css";
import translations from "../translishions/translations.js";

export default function AIRecipePage() {
  const [language, setLanguage] = useState("kk");
  const t = translations[language];

  const [calories, setCalories] = useState(500);
  const [mealType, setMealType] = useState(t.meals[0]);
  const [difficulty, setDifficulty] = useState(t.difficulties[0]);
  const [ingredients, setIngredients] = useState("");
  const [recipe, setRecipe] = useState("");
  const [loading, setLoading] = useState(false);
  const [comments, setComments] = useState("");

  const handleLanguageChange = (e) => {
    const newLang = e.target.value;
    setLanguage(newLang);
    setMealType(translations[newLang].meals[0]);
    setDifficulty(translations[newLang].difficulties[0]);
  };

  const fetchAIRecipe = async (e) => {
    e.preventDefault();
    setLoading(true);
    setRecipe("");

    const prompt = `
–ú–µ–Ω—ñ“£ —Ç–æ“£–∞–∑—ã—Ç“õ—ã–º–¥–∞ –±–∞—Ä –∑–∞—Ç—Ç–∞—Ä: ${ingredients}.
–ú–∞“ì–∞–Ω —à–µ—Ñ-–ø–æ–≤–∞—Ä–¥—ã“£ –¥–µ“£–≥–µ–π—ñ–Ω–¥–µ, –µ“£ –ø–∞–π–¥–∞–ª—ã, –Ω–∞“õ—Ç—ã ”ô—Ä—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Ä–µ—Ü–µ–ø—Ç –∂–∞—Å–∞“£—ã–∑.
–†–µ—Ü–µ–ø—Ç—Ç–µ —Ç–∞“ì–∞–º–Ω—ã“£ –∞—Ç—ã, “õ–∞–∂–µ—Ç—Ç—ñ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—Ç–µ—Ä –º–µ–Ω ”ô—Ä “õ–∞–¥–∞–º–¥—ã “õ—ã—Å“õ–∞—à–∞, –±—ñ—Ä–∞“õ —Ç–æ–ª—ã“õ ”ô—Ä—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –µ—Ç—ñ–ø –∂–∞–∑—ã“£—ã–∑.
–†–µ—Ü–µ–ø—Ç—Ç—ñ“£ –∫–∞–ª–æ—Ä–∏—è—Å—ã —à–∞–º–∞–º–µ–Ω ${calories}, —Ç–∞“ì–∞–º —Ç“Ø—Ä—ñ - ${mealType}, –¥–∞–π—ã–Ω–¥–∞–ª—É “õ–∏—ã–Ω–¥—ã“ì—ã - ${difficulty}.
“ö–æ—Å—ã–º—à–∞ —Ç–∞–ª–∞–ø—Ç–∞—Ä: ${comments || "–ï—à“õ–∞–Ω–¥–∞–π “õ–æ—Å—ã–º—à–∞ —Ç–∞–ª–∞–ø –∂–æ“õ"}.
–ñ–∞—É–∞–ø—Ç—ã —Ç–∞–∑–∞ ”ô—Ä—ñ –∫”ô—Å—ñ–±–∏ —Ç—ñ–ª–º–µ–Ω, –¥“±—Ä—ã—Å ”ô—Ä—ñ –º”ô–Ω–¥—ñ –∞“õ–ø–∞—Ä–∞—Ç–ø–µ–Ω “ì–∞–Ω–∞ –±–µ—Ä—ñ“£—ñ–∑.

My fridge contains: ${ingredients}.
Make a recipe like a top chef, very clear, practical, and detailed but concise.
Include the dish name, ingredients, and step-by-step cooking instructions.
Calories about ${calories}, meal type is ${mealType}, difficulty level is ${difficulty}.
Additional requirements: ${comments || "No additional requirements"}.
Please provide a professional, clear, and useful response.

–í –º–æ–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –µ—Å—Ç—å: ${ingredients}.
–ü—Ä–∏–≥–æ—Ç–æ–≤—å —Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ —à–µ—Ñ-–ø–æ–≤–∞—Ä ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π.
–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ –ø–æ–ª–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ ${calories}, —Ç–∏–ø –±–ª—é–¥–∞ ‚Äî ${mealType}, —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî ${difficulty}.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${comments || "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"}.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —è—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

–ñ–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ —Ç—ñ–ª–¥–µ: ${
      language === "kk"
        ? "“õ–∞–∑–∞“õ—à–∞"
        : language === "ru"
        ? "–ø–æ-—Ä—É—Å—Å–∫–∏"
        : "in English"
    }.
–¢–µ–∫ —Ä–µ—Ü–µ–ø—Ç –∞—Ç–∞—É—ã –º–µ–Ω –Ω–µ–≥—ñ–∑–≥—ñ “õ–∞–¥–∞–º–¥–∞—Ä–¥—ã “õ–æ—Å—ã“£—ã–∑.
`;

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDU6uYQWRaqSHQxlHTofXNCqba5H6bdyLQ`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        }
      );
      const data = await response.json();
      const result =
        data.candidates?.[0]?.content?.parts?.[0]?.text || "No recipe found.";
      setRecipe(result);
    } catch (error) {
      setRecipe("‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <PageHeader />
      <div className="filterPart">
        <div className="recipeFinder">
          <div className="languageSelectContainer">
            <select
              onChange={handleLanguageChange}
              value={language}
              className="languageSelect"
            >
              <option value="kk">üá∞üáø “ö–∞–∑–∞“õ—à–∞</option>
              <option value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
              <option value="en">üá¨üáß English</option>
            </select>
          </div>

          <h1 className="recipeTitle">üçΩÔ∏è {t.title}</h1>

          <form onSubmit={fetchAIRecipe} className="recipeForm">
            <label className="formGroup">
              üî• {t.calories}: <strong>{calories}</strong>
              <input
                type="range"
                min="100"
                max="1000"
                step="50"
                value={calories}
                onChange={(e) => setCalories(e.target.value)}
                className="rangeInput"
              />
            </label>

            <label className="formGroup">
              üç≤ {t.mealType}:
              <select
                value={mealType}
                onChange={(e) => setMealType(e.target.value)}
                className="selectInput"
              >
                {t.meals.map((meal) => (
                  <option key={meal} value={meal}>
                    {meal}
                  </option>
                ))}
              </select>
            </label>

            <label className="formGroup">
              üéØ {t.difficulty}:
              <select
                value={difficulty}
                onChange={(e) => setDifficulty(e.target.value)}
                className="selectInput"
              >
                {t.difficulties.map((diff) => (
                  <option key={diff} value={diff}>
                    {diff}
                  </option>
                ))}
              </select>
            </label>

            <label className="formGroup">
              üß∫ {t.ingredients}:
              <input
                type="text"
                placeholder={t.placeholder}
                value={ingredients}
                onChange={(e) => setIngredients(e.target.value)}
                className="textInput"
              />
            </label>

            <label className="formGroup">
              üí¨ {t.comments || "“ö–æ—Å—ã–º—à–∞ —Ç–∞–ª–∞–ø—Ç–∞—Ä"}:
              <input
                type="text"
                placeholder={
                  t.commentsPlaceholder ||
                  "–ú—ã—Å–∞–ª—ã: –±–µ–ª–æ–∫ –∫”©–ø, –∞–ª–ª–µ—Ä–≥–∏—è“ì–∞ –±–æ–ª–º–∞–π–¥—ã..."
                }
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                className="textInput"
              />
            </label>

            <button type="submit" disabled={loading} className="submitButton">
              {loading ? "ü§ñ " + t.searching : "üîç " + t.search}
            </button>
          </form>

          {recipe && (
            <div className="recipeResult">
              <h2>üìÑ {t.result}</h2>
              <div className="recipeText">
                <ReactMarkdown>{recipe}</ReactMarkdown>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
